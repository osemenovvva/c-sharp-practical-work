Цель практической работы
Научиться применять управляющие конструкции языка, такие как:

операторы ветвления if, switch;
циклы for, while, do while.


Что входит в практическую работу
Написать приложение по определению чётного или нечётного числа.
Написать программу подсчёта суммы карт в игре «21».
Реализовать алгоритм проверки простого числа.
Найти наименьший элемент в последовательности.
Создать игру «Угадай число».


Задание 1. Приложение по определению чётного или нечётного числа
Что нужно сделать
Напишите приложение, которое определяет чётное или нечётное число. Алгоритм приложения выглядит следующим образом:

На экране программа с помощью оператора Console.WriteLine предлагает пользователю ввести целое число.
С помощью оператора Console.ReadLine считывается введённое число.
С помощью метода int.Parse число преобразуется в целочисленную переменную.
С помощью оператора деления с остатком определяется, чётное число или нечётное.
В зависимости от предыдущего шага на экран выводится текст, является ли данное число чётным или нет.
Рекомендация
Оператор деления с остатком на языке C# записывается как %. То есть, если нужно проверить на чётность число N, то данное логическое выражение N % 2 == 0 будет истинно. Если это выражение будет ложно — число нечётное.

Что оценивается
Программа выводит на экран, чётное число или нет. 



Задание 2. Программа подсчёта суммы карт в игре «21»
Что нужно сделать
Есть довольно простая карточная игра, она называется «21». Суть игры сводится к подсчёту карт. Каждая карта имеет свой «вес». Напишите программу, которая подсчитает сумму всех карт у вас на руках. Задача программы сводится к следующему алгоритму:

Программа приветствует пользователя и спрашивает, сколько у него на руках карт.
Пользователь вводит целое число.
Преобразуем это число в счётчик для цикла.
С помощью цикла for итеративно просим пользователя ввести номинал каждой карты. Для карт с числовым номиналом он вводит только цифру. 
Для «картинок» следует принять обозначения латинскими буквами:
Валет = J
Дама = Q
Король = K
Туз = T
Внутри цикла, используя оператор switch, «вес» каждой карты складываем в общую переменную суммы, которая объявлена до тела основного цикла.
Для числовых карт их «вес» равен весу, указанному при вводе пользователем. Для «картинок» «вес» равен 10.
По завершении ввода на экране появится значение суммы карт.
Рекомендация
Чтобы суммировать значение в какой-нибудь переменной, можно воспользоваться следующей короткой записью: 

sum = sum + 10;

В рамках данной операции к текущему значению переменной sum прибавится 10. Тем самым вы увеличите значение переменной, а не перепишете в ней значение.

Прежде чем конвертировать считанную строку в число, нужно убедиться, что пользователь ввёл не «картинку». Если он ввёл «картинку» (K, Q, J, T), то к сумме прибавляем 10, иначе можем применять метод int.Parse().

Что оценивается
Программа выводит на экран информацию о сумме карт на руках у пользователя. 
Программа выводит на экран в текстовом виде информацию о том, что должен сделать пользователь. Например: «Введите номинал следующей карты».


Задание 3. Проверка простого числа
Что нужно сделать
Эта задача — одна из самых распространённых и популярных. Простое число — число, которое делится само на себя и на единицу. Есть много алгоритмов поиска простых чисел. Реализуйте один из самых лёгких. Проверьте введённое с клавиатуры целое число на признак простоты. Чтобы закрепить знания, реализуйте эту задачу, используя цикл while.

Для начала пользователь вводит целое число.
Затем в цикле нужно перебрать все числа, начиная с 1 и до N − 1.
Входное число N при каждой итерации цикла нужно делить на число, которое получается в цикле с остатком.
Если остаток от деления равен 0, значит, программа нашла делитель этого числа, и потому это число уже не может являться простым числом.
Если остаток от деления равен 0, то переменной bool, объявленной за рамками цикла, следует присвоить значение true.
Если после выхода из цикла значение переменной осталось false, значит, число простое. Если значение переменной стало true, значит, был найден делитель, поэтому число не может считаться простым.
Советы и рекомендации
Посмотрите на оператор деления с остатком в задаче 1.
Для проверки простоты чисел используйте простые числа: 3, 7, 37, 79, 173. 
Что оценивается
Программа выводит на экран, является ли число простым.
Программа не зависает.


Задание 4. Наименьший элемент в последовательности
Что нужно сделать
Найдите наименьший элемент в последовательности, которую вводит пользователь. Детальный алгоритм программы:

Пользователь вводит длину последовательности. 
Затем пользователь последовательно вводит целые числа (как положительные, так и отрицательные). Числа разделяются клавишей Enter.
Каждое введённое число сравнивается со значением переменной, отвечающей за минимальный элемент. Если введённое число оказывается меньше, то нужно обновить значение переменной.
Рекомендация
Чтобы правильно организовать поиск наименьшего числа, на этапе инициализации переменной, отвечающей за минимальный элемент в качестве начального значения минимального числа, выберите int.MaxValue. Тогда любое из чисел, которые будет вводить пользователь, окажется меньше, чем это значение.

Что оценивается
Программа выводит на экран наименьшее число из последовательности пользователя.



Задание 5. Игра «Угадай число»
Что нужно сделать
Разработайте программу по следующему алгоритму:

Пользователь вводит максимальное целое число диапазона.
На основе диапазона целых чисел (от 0 до «введено пользователем») программа генерирует случайное целое число из диапазона. 
Пользователю предлагается ввести загаданное программой случайное число. Пользователь вводит свои предположения в консоли приложения. 
Если число меньше загаданного, программа сообщает об этом пользователю. 
Если больше, то тоже сообщает, что число больше загаданного.
Программа завершается, когда пользователь угадывает число. 
Если пользователь устал играть, то вместо ввода числа он вводит пустую строку и нажимает Enter. Тогда программа завершается, предварительно показывая, какое число было загадано.
Советы и рекомендации
Чтобы организовать бесконечный ввод чисел и дать пользователю возможность вводить сколько угодно чисел, используйте цикл while или do while с условием (1 == 1) или просто (true).
Для выхода из бесконечного цикла используйте break.
Что оценивается
Программа опрашивает пользователя и просит вводить числа.
Реализована возможность выхода из бесконечного цикла, если пользователь устал.
Демонстрируется загаданный результат.
